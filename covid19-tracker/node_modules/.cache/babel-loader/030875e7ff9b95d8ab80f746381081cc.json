{"ast":null,"code":"import _toConsumableArray from\"/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useMemo,useRef}from'react';import Globe from'react-globe.gl';import{getPolygonLabel}from'./Label';import*as d3 from'd3';import TimeLine from'./AdditonalInfo';import Spinner from'./Spinner';import'./Globe.css';import Modal from'../Modal/Modal.js';var World=function World(props){var globeEl=useRef();var _useState=useState({features:[]}),_useState2=_slicedToArray(_useState,2),countries=_useState2[0],setCountries=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),hoverD=_useState4[0],setHoverD=_useState4[1];var _useState5=useState({width:window.innerWidth,height:window.innerHeight}),_useState6=_slicedToArray(_useState5,2),dimension=_useState6[0],setDimension=_useState6[1];var _useState7=useState({infected:0,deaths:0,recovered:0}),_useState8=_slicedToArray(_useState7,2),worldTotal=_useState8[0],setTotal=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),loading=_useState10[0],setLoading=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),modalState=_useState12[0],setModalState=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),data=_useState14[0],setData=_useState14[1];var _useState15=useState({name:'',caseperM:0,deathsperM:0,totalCase:0,testperM:0}),_useState16=_slicedToArray(_useState15,2),countryInfo=_useState16[0],setCountryInfo=_useState16[1];useEffect(function(){window.addEventListener('resize',function(){setDimension({width:window.innerWidth,height:window.innerHeight});});globeEl.current.controls().autoRotate=true;globeEl.current.controls().autoRotateSpeed=0.7;var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var covidData,data,totalDeaths,totalCases,recoveries,covid;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://corona.lmao.ninja/v2/countries\").then(function(res){return res.json();});case 2:covidData=_context.sent;_context.next=5;return fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson').then(function(res){return res.json();});case 5:data=_context.sent;totalDeaths=0,totalCases=0,recoveries=0;covid=new Map();covidData.forEach(function(value){covid.set(value.countryInfo.iso2,{iso2:value.countryInfo.iso2,totalCases:value.cases,totalDeaths:value.deaths,recoveries:value.recovered,activeCases:value.active,deathsPerOneMillion:value.deathsPerOneMillion,casesPerOneMillion:value.casesPerOneMillion,testsPerOneMillion:value.testsPerOneMillion});});data.features.forEach(function(value,i,array){var found=covid.get(array[i].properties.ISO_A2);if(found===undefined){array[i].properties.totalCases=0;array[i].properties.totalDeaths=0;array[i].properties.recoveries=0;array[i].properties.activeCases=0;array[i].properties.caseperM=0;array[i].properties.deathsperM=0;}else{array[i].properties.totalCases=found.totalCases;array[i].properties.totalDeaths=found.totalDeaths;array[i].properties.recoveries=found.recoveries;array[i].properties.activeCases=found.activeCases;array[i].properties.caseperM=found.casesPerOneMillion;array[i].properties.deathsperM=found.deathsPerOneMillion;array[i].properties.testperM=found.testsPerOneMillion;totalCases+=Number(found.totalCases);totalDeaths+=Number(found.totalDeaths);recoveries+=Number(found.recoveries);}});setCountries(data);setTotal({infected:totalCases,deaths:totalDeaths,recovered:recoveries});setLoading(true);setModalState(false);case 14:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[]);// Getting the scale small enough so the globe looks nicer\nvar getVal=function getVal(feat){return Math.pow(feat.properties.activeCases/feat.properties.POP_EST,1/4);};var maxVal=useMemo(function(){return Math.max.apply(Math,_toConsumableArray(countries.features.map(getVal)));},[countries]);var colorScale=d3.scaleSequential(d3.interpolateReds);colorScale.domain([0,maxVal]);function getFlagName(d){switch(d.ADMIN){case\"France\":return\"fr\";case\"Norway\":return\"no\";default:return d.ISO_A2.toLowerCase();}}function handleClose(){setModalState(false);}return/*#__PURE__*/React.createElement(\"div\",{className:\"Canvas_Container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"top-info-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"title\"},\"COVID-19 GLOBE TRACKER\")),loading?null:/*#__PURE__*/React.createElement(Spinner,null),/*#__PURE__*/React.createElement(Modal,{show:modalState,handleClose:handleClose,name:countryInfo,data:data}),/*#__PURE__*/React.createElement(Globe,{globeImageUrl:\"//unpkg.com/three-globe/example/img/earth-night.jpg\",backgroundImageUrl:\"//unpkg.com/three-globe/example/img/night-sky.png\",width:dimension.width,height:dimension.height,ref:globeEl,showAtmosphere:false,polygonsData:countries.features,polygonAltitude:function polygonAltitude(d){return d===hoverD?0.12:0.06;},polygonCapColor:function polygonCapColor(d){return d===hoverD?'#eceac4':colorScale(getVal(d));},polygonSideColor:function polygonSideColor(){return'rgba(0, 100, 0, 0.15)';},polygonStrokeColor:function polygonStrokeColor(){return'#111';},polygonLabel:function polygonLabel(_ref2){var d=_ref2.properties;var flagName=getFlagName(d);return getPolygonLabel(flagName,d);},onPolygonHover:setHoverD,onPolygonClick:function onPolygonClick(_ref3,e){var d=_ref3.properties;setModalState(true);setData([d.activeCases,d.totalDeaths,d.recoveries]);setCountryInfo({name:d.ADMIN,caseperM:d.caseperM,deathsperM:d.deathsperM,totalCase:d.totalCases,testperM:d.testperM});},polygonsTransitionDuration:300}),/*#__PURE__*/React.createElement(TimeLine,{infected:worldTotal.infected,deaths:worldTotal.deaths,recovered:worldTotal.recovered}));};export default World;","map":{"version":3,"sources":["/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/src/components/Globe/Globe.js"],"names":["React","useState","useEffect","useMemo","useRef","Globe","getPolygonLabel","d3","TimeLine","Spinner","Modal","World","props","globeEl","features","countries","setCountries","hoverD","setHoverD","width","window","innerWidth","height","innerHeight","dimension","setDimension","infected","deaths","recovered","worldTotal","setTotal","loading","setLoading","modalState","setModalState","data","setData","name","caseperM","deathsperM","totalCase","testperM","countryInfo","setCountryInfo","addEventListener","current","controls","autoRotate","autoRotateSpeed","fetchData","fetch","then","res","json","covidData","totalDeaths","totalCases","recoveries","covid","Map","forEach","value","set","iso2","cases","activeCases","active","deathsPerOneMillion","casesPerOneMillion","testsPerOneMillion","i","array","found","get","properties","ISO_A2","undefined","Number","getVal","feat","Math","pow","POP_EST","maxVal","max","map","colorScale","scaleSequential","interpolateReds","domain","getFlagName","d","ADMIN","toLowerCase","handleClose","flagName","e"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useMemo, useRef} from 'react'\nimport Globe from 'react-globe.gl';\nimport {getPolygonLabel} from './Label';\nimport * as d3 from 'd3'\nimport TimeLine from './AdditonalInfo';\nimport Spinner from './Spinner';\nimport './Globe.css';\nimport Modal from '../Modal/Modal.js';\n\nconst World = (props)=>{\n  const globeEl = useRef();\n  const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n    const [dimension,setDimension] = useState({width:window.innerWidth,height:window.innerHeight})\n    const [worldTotal,setTotal] = useState({infected:0, deaths:0,recovered:0})\n    const [loading,setLoading] =useState(false);\n    const [modalState,setModalState] = useState(false);\n    const [data,setData] =useState([]);\n    const [countryInfo, setCountryInfo] = useState({name:'',caseperM:0,deathsperM:0,totalCase:0,testperM:0});\n    useEffect(() => {\n\n        window.addEventListener('resize', () => {\n          setDimension({width:window.innerWidth,height:window.innerHeight});\n        });\n        globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.7;\n     const fetchData= async() =>{\n      let covidData = await fetch(\"https://corona.lmao.ninja/v2/countries\").then(res=>res.json());\n      \n      let data = await fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson').then(res => res.json());\n      let totalDeaths=0,totalCases=0,recoveries =0;\n      let covid = new Map();\n      covidData.forEach(value=>{\n\n          covid.set(value.countryInfo.iso2,{\n              iso2:value.countryInfo.iso2,\n              totalCases: value.cases,\n              totalDeaths:value.deaths,\n              recoveries:value.recovered,\n              activeCases:value.active,\n              deathsPerOneMillion:value.deathsPerOneMillion,\n              casesPerOneMillion:value.casesPerOneMillion,\n              testsPerOneMillion:value.testsPerOneMillion\n          })\n      })\n      data.features.forEach((value,i,array)=>{\n        let found = covid.get(array[i].properties.ISO_A2)\n        if(found===undefined){\n            array[i].properties.totalCases = 0;\n            array[i].properties.totalDeaths = 0;\n            array[i].properties.recoveries = 0;\n            array[i].properties.activeCases = 0;\n            array[i].properties.caseperM = 0;\n            array[i].properties.deathsperM =0;\n\n        }\n        else{\n            array[i].properties.totalCases = found.totalCases;\n            array[i].properties.totalDeaths = found.totalDeaths;\n            array[i].properties.recoveries = found.recoveries;\n            array[i].properties.activeCases = found.activeCases;\n            array[i].properties.caseperM = found.casesPerOneMillion;\n            array[i].properties.deathsperM = found.deathsPerOneMillion;\n            array[i].properties.testperM = found.testsPerOneMillion;\n            totalCases+=Number(found.totalCases);\n            totalDeaths+=Number(found.totalDeaths);\n            recoveries+=Number(found.recoveries);\n        }\n        })\n      \n      setCountries(data);\n      setTotal({infected:totalCases,deaths:totalDeaths,recovered:recoveries});\n      setLoading(true);\n      setModalState(false);\n    }\n\n      fetchData();\n    }, []);\n        // Getting the scale small enough so the globe looks nicer\n        const getVal = feat => {\n            return Math.pow(feat.properties.activeCases / feat.properties.POP_EST, 1 / 4);\n        }    \n        const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n        const colorScale = d3.scaleSequential(d3.interpolateReds)\n        colorScale.domain([0, maxVal]);\n    \n        function getFlagName(d) {\n            switch (d.ADMIN) {\n              case \"France\":\n                return \"fr\";\n              case \"Norway\":\n                return \"no\";\n              default:\n                return d.ISO_A2.toLowerCase();\n            }\n          }\n          function handleClose(){\n            setModalState(false);\n          }\n        return (\n        <div className=\"Canvas_Container\" >\n          <div className=\"top-info-container\">\n      <div className=\"title\">COVID-19 GLOBE TRACKER</div>\n    </div>{loading ? null : <Spinner/> }\n        <Modal show={modalState} handleClose={handleClose} name ={countryInfo}data={data}></Modal>\n        <Globe\n          globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n          backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n          width={dimension.width}\n          height={dimension.height}\n          ref={globeEl}\n          showAtmosphere={false}\n          polygonsData={countries.features}\n          polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n          polygonCapColor={d => d === hoverD ? '#eceac4' : colorScale(getVal(d))}\n          polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n          polygonStrokeColor={() => '#111'}\n          polygonLabel={({ properties: d }) => {\n            const flagName = getFlagName(d);\n            return getPolygonLabel(flagName, d);\n  }}\n          onPolygonHover={setHoverD}\n          onPolygonClick={({ properties: d },e)=>{\n            setModalState(true);\n            setData([d.activeCases,d.totalDeaths,d.recoveries]);\n            setCountryInfo({name:d.ADMIN,caseperM:d.caseperM,deathsperM:d.deathsperM,totalCase:d.totalCases,testperM:d.testperM});\n          }}\n          polygonsTransitionDuration={300}\n        />\n        <TimeLine infected={worldTotal.infected} deaths={worldTotal.deaths} recovered={worldTotal.recovered}/>\n       </div>\n        );\n\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}