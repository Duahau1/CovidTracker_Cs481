{"ast":null,"code":"'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n      outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n      outerNode = linkedList(data, 0, outerLen, dim, true),\n      triangles = [];\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n  var minX, minY, maxX, maxY, x, y, invSize;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 1 / invSize : 0;\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n  var stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n      removeNode(ear); // skipping the next vertex leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // triangle bbox; min & max are calculated like this for speed\n\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n      maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n  var p = ear.prevZ,\n      n = ear.nextZ; // look for points inside the triangle in both directions\n\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  } // look for remaining points in decreasing z-order\n\n\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  } // look for remaining points in increasing z-order\n\n\n  while (n && n.z <= maxZ) {\n    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n\n  do {\n    var a = p.prev,\n        b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return filterPoints(p);\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n\n  do {\n    var b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, invSize);\n        earcutLinked(c, triangles, dim, minX, minY, invSize);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  outerNode = findHoleBridge(hole, outerNode);\n\n  if (outerNode) {\n    var b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n    filterPoints(outerNode, outerNode.next);\n    filterPoints(b, b.next);\n  }\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n  if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n  p = m;\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  } while (p !== stop);\n\n  return m;\n} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, invSize) {\n  var p = start;\n\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) * invSize;\n  y = 32767 * (y - minY) * invSize;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  var p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  var o1 = sign(area(p1, q1, p2));\n  var o2 = sign(area(p1, q1, q2));\n  var o3 = sign(area(p2, q2, p1));\n  var o4 = sign(area(p2, q2, q1));\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n} // for collinear points p, q, r, check if point q lies on segment pr\n\n\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertex index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertex nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = null; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n} // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\n\n\nearcut.flatten = function (data) {\n  var dim = data[0][0].length,\n      result = {\n    vertices: [],\n    holes: [],\n    dimensions: dim\n  },\n      holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/earcut/src/earcut.js"],"names":["module","exports","earcut","default","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","maxX","maxY","x","y","invSize","eliminateHoles","i","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","filterPoints","p","again","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","prevZ","n","nextZ","z","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","sectorContainsSector","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","inside","a2","Node","b2","an","bp","deviation","polygonArea","trianglesArea","sum","j","flatten","result","vertices","holes","dimensions","holeIndex","d"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n"]},"metadata":{},"sourceType":"script"}