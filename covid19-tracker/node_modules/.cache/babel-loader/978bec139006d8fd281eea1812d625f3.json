{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @module helpers\n */\n\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\n\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nexports.factors = {\n  centimeters: exports.earthRadius * 100,\n  centimetres: exports.earthRadius * 100,\n  degrees: exports.earthRadius / 111325,\n  feet: exports.earthRadius * 3.28084,\n  inches: exports.earthRadius * 39.370,\n  kilometers: exports.earthRadius / 1000,\n  kilometres: exports.earthRadius / 1000,\n  meters: exports.earthRadius,\n  metres: exports.earthRadius,\n  miles: exports.earthRadius / 1609.344,\n  millimeters: exports.earthRadius * 1000,\n  millimetres: exports.earthRadius * 1000,\n  nauticalmiles: exports.earthRadius / 1852,\n  radians: 1,\n  yards: exports.earthRadius / 1.0936\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nexports.unitsFactors = {\n  centimeters: 100,\n  centimetres: 100,\n  degrees: 1 / 111325,\n  feet: 3.28084,\n  inches: 39.370,\n  kilometers: 1 / 1000,\n  kilometres: 1 / 1000,\n  meters: 1,\n  metres: 1,\n  miles: 1 / 1609.344,\n  millimeters: 1000,\n  millimetres: 1000,\n  nauticalmiles: 1 / 1852,\n  radians: 1 / exports.earthRadius,\n  yards: 1 / 1.0936\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\n\nexports.areaFactors = {\n  acres: 0.000247105,\n  centimeters: 10000,\n  centimetres: 10000,\n  feet: 10.763910417,\n  inches: 1550.003100006,\n  kilometers: 0.000001,\n  kilometres: 0.000001,\n  meters: 1,\n  metres: 1,\n  miles: 3.86e-7,\n  millimeters: 1000000,\n  millimetres: 1000000,\n  yards: 1.195990046\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\n\nfunction feature(geom, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var feat = {\n    type: \"Feature\"\n  };\n\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\n\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\n\nfunction geometry(type, coordinates, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\n\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\n\nfunction point(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"Point\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\n\nfunction points(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return point(coords, properties);\n  }), options);\n}\n\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\n\nfunction polygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n    var ring = coordinates_1[_i];\n\n    if (ring.length < 4) {\n      throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n    }\n\n    for (var j = 0; j < ring[ring.length - 1].length; j++) {\n      // Check if first point of Polygon contains two numbers\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n\n  var geom = {\n    type: \"Polygon\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\n\nfunction polygons(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return polygon(coords, properties);\n  }), options);\n}\n\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\n\nfunction lineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n\n  var geom = {\n    type: \"LineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\n\nfunction lineStrings(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return featureCollection(coordinates.map(function (coords) {\n    return lineString(coords, properties);\n  }), options);\n}\n\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\n\nfunction featureCollection(features, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var fc = {\n    type: \"FeatureCollection\"\n  };\n\n  if (options.id) {\n    fc.id = options.id;\n  }\n\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n\n  fc.features = features;\n  return fc;\n}\n\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\n\nfunction multiLineString(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiLineString\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\n\nfunction multiPoint(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPoint\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\n\nfunction multiPolygon(coordinates, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"MultiPolygon\",\n    coordinates: coordinates\n  };\n  return feature(geom, properties, options);\n}\n\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\n\nfunction geometryCollection(geometries, properties, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = {\n    type: \"GeometryCollection\",\n    geometries: geometries\n  };\n  return feature(geom, properties, options);\n}\n\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\n\nfunction round(num, precision) {\n  if (precision === void 0) {\n    precision = 0;\n  }\n\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\n\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\n\nfunction radiansToLength(radians, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = exports.factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return radians * factor;\n}\n\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\n\nfunction lengthToRadians(distance, units) {\n  if (units === void 0) {\n    units = \"kilometers\";\n  }\n\n  var factor = exports.factors[units];\n\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n\n  return distance / factor;\n}\n\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\n\nfunction lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\n\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\n\nfunction bearingToAzimuth(bearing) {\n  var angle = bearing % 360;\n\n  if (angle < 0) {\n    angle += 360;\n  }\n\n  return angle;\n}\n\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\n\nfunction radiansToDegrees(radians) {\n  var degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\n\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\n\nfunction degreesToRadians(degrees) {\n  var radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\n\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\n\nfunction convertLength(length, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"kilometers\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\n\nfunction convertArea(area, originalUnit, finalUnit) {\n  if (originalUnit === void 0) {\n    originalUnit = \"meters\";\n  }\n\n  if (finalUnit === void 0) {\n    finalUnit = \"kilometers\";\n  }\n\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n\n  var startFactor = exports.areaFactors[originalUnit];\n\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n\n  var finalFactor = exports.areaFactors[finalUnit];\n\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n\n  return area / startFactor * finalFactor;\n}\n\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\n\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\n\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\n\nfunction isObject(input) {\n  return !!input && input.constructor === Object;\n}\n\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\n\nfunction validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n\n  bbox.forEach(function (num) {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\n\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\n\nfunction validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\n\nexports.validateId = validateId; // Deprecated methods\n\nfunction radians2degrees() {\n  throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\n\nexports.radians2degrees = radians2degrees;\n\nfunction degrees2radians() {\n  throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\n\nexports.degrees2radians = degrees2radians;\n\nfunction distanceToDegrees() {\n  throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\n\nexports.distanceToDegrees = distanceToDegrees;\n\nfunction distanceToRadians() {\n  throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\n\nexports.distanceToRadians = distanceToRadians;\n\nfunction radiansToDistance() {\n  throw new Error(\"method has been renamed to `radiansToLength`\");\n}\n\nexports.radiansToDistance = radiansToDistance;\n\nfunction bearingToAngle() {\n  throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\n\nexports.bearingToAngle = bearingToAngle;\n\nfunction convertDistance() {\n  throw new Error(\"method has been renamed to `convertLength`\");\n}\n\nexports.convertDistance = convertDistance;","map":{"version":3,"sources":["/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/node_modules/@turf/helpers/index.js"],"names":["Object","defineProperty","exports","value","earthRadius","factors","centimeters","centimetres","degrees","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","feature","geom","properties","options","feat","type","id","bbox","geometry","coordinates","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","Error","points","featureCollection","map","coords","_i","coordinates_1","length","ring","j","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","isNumber","isNaN","Array","isArray","test","isObject","input","constructor","validateBBox","forEach","validateId","indexOf","radians2degrees","degrees2radians","distanceToDegrees","distanceToRadians","radiansToDistance","bearingToAngle","convertDistance"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n"]},"metadata":{},"sourceType":"script"}