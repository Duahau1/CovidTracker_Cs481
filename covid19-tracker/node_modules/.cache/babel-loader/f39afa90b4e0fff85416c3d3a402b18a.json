{"ast":null,"code":"var _jsxFileName = \"/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/src/components/Globe/Globe.js\";\nimport React, { useState, useEffect, useMemo, useRef } from 'react';\nimport Globe from 'react-globe.gl';\nimport { getPolygonLabel } from './Label';\nimport * as d3 from 'd3';\nimport TimeLine from './AdditonalInfo';\nimport Spinner from './Spinner';\nimport './Globe.css';\nimport Modal from '../Modal/Modal.js';\n\nconst World = props => {\n  const globeEl = useRef();\n  const [countries, setCountries] = useState({\n    features: []\n  });\n  const [hoverD, setHoverD] = useState();\n  const [dimension, setDimension] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [worldTotal, setTotal] = useState({\n    infected: 0,\n    deaths: 0,\n    recovered: 0\n  });\n  const [loading, setLoading] = useState(false);\n  const [modalState, setModalState] = useState(false);\n  const [data, setData] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({\n    name: '',\n    caseperM: 0,\n    deathsperM: 0,\n    totalCase: 0,\n    testperM: 0\n  });\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      setDimension({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    });\n    globeEl.current.controls().autoRotate = true;\n    globeEl.current.controls().autoRotateSpeed = 0.7;\n\n    const fetchData = async () => {\n      let covidData = await fetch(\"https://corona.lmao.ninja/v2/countries\").then(res => res.json());\n      let data = await fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson').then(res => res.json());\n      let totalDeaths = 0,\n          totalCases = 0,\n          recoveries = 0;\n      let covid = new Map();\n      covidData.forEach(value => {\n        covid.set(value.countryInfo.iso2, {\n          iso2: value.countryInfo.iso2,\n          totalCases: value.cases,\n          totalDeaths: value.deaths,\n          recoveries: value.recovered,\n          activeCases: value.active,\n          deathsPerOneMillion: value.deathsPerOneMillion,\n          casesPerOneMillion: value.casesPerOneMillion,\n          testsPerOneMillion: value.testsPerOneMillion\n        });\n      });\n      data.features.forEach((value, i, array) => {\n        let found = covid.get(array[i].properties.ISO_A2);\n\n        if (found === undefined) {\n          array[i].properties.totalCases = 0;\n          array[i].properties.totalDeaths = 0;\n          array[i].properties.recoveries = 0;\n          array[i].properties.activeCases = 0;\n          array[i].properties.caseperM = 0;\n          array[i].properties.deathsperM = 0;\n        } else {\n          array[i].properties.totalCases = found.totalCases;\n          array[i].properties.totalDeaths = found.totalDeaths;\n          array[i].properties.recoveries = found.recoveries;\n          array[i].properties.activeCases = found.activeCases;\n          array[i].properties.caseperM = found.casesPerOneMillion;\n          array[i].properties.deathsperM = found.deathsPerOneMillion;\n          array[i].properties.testperM = found.testsPerOneMillion;\n          totalCases += Number(found.totalCases);\n          totalDeaths += Number(found.totalDeaths);\n          recoveries += Number(found.recoveries);\n        }\n      });\n      setCountries(data);\n      setTotal({\n        infected: totalCases,\n        deaths: totalDeaths,\n        recovered: recoveries\n      });\n      setLoading(true);\n      setModalState(false);\n    };\n\n    fetchData();\n  }, []); // Getting the scale small enough so the globe looks nicer\n\n  const getVal = feat => {\n    return Math.pow(feat.properties.activeCases / feat.properties.POP_EST, 1 / 4);\n  };\n\n  const maxVal = useMemo(() => Math.max(...countries.features.map(getVal)), [countries]);\n  const colorScale = d3.scaleSequential(d3.interpolateReds);\n  colorScale.domain([0, maxVal]);\n\n  function getFlagName(d) {\n    switch (d.ADMIN) {\n      case \"France\":\n        return \"fr\";\n\n      case \"Norway\":\n        return \"no\";\n\n      default:\n        return d.ISO_A2.toLowerCase();\n    }\n  }\n\n  function handleClose() {\n    setModalState(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Canvas_Container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"top-info-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"COVID-19 GLOBE TRACKER\")), loading ? null : /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Modal, {\n    show: modalState,\n    handleClose: handleClose,\n    name: countryInfo,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Globe, {\n    globeImageUrl: \"//unpkg.com/three-globe/example/img/earth-night.jpg\",\n    backgroundImageUrl: \"//unpkg.com/three-globe/example/img/night-sky.png\",\n    width: dimension.width,\n    height: dimension.height,\n    ref: globeEl,\n    showAtmosphere: false,\n    polygonsData: countries.features,\n    polygonAltitude: d => d === hoverD ? 0.12 : 0.06,\n    polygonCapColor: d => d === hoverD ? '#eceac4' : colorScale(getVal(d)),\n    polygonSideColor: () => 'rgba(0, 100, 0, 0.15)',\n    polygonStrokeColor: () => '#111',\n    polygonLabel: ({\n      properties: d\n    }) => {\n      const flagName = getFlagName(d);\n      return getPolygonLabel(flagName, d);\n    },\n    onPolygonHover: setHoverD,\n    onPolygonClick: ({\n      properties: d\n    }, e) => {\n      setModalState(true);\n      setData([d.activeCases, d.totalDeaths, d.recoveries]);\n      setCountryInfo({\n        name: d.ADMIN,\n        caseperM: d.caseperM,\n        deathsperM: d.deathsperM,\n        totalCase: d.totalCases,\n        testperM: d.testperM\n      });\n    },\n    polygonsTransitionDuration: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TimeLine, {\n    infected: worldTotal.infected,\n    deaths: worldTotal.deaths,\n    recovered: worldTotal.recovered,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default World;","map":{"version":3,"sources":["/Users/alexacevedo/git/CovidTracker_Cs481/covid19-tracker/src/components/Globe/Globe.js"],"names":["React","useState","useEffect","useMemo","useRef","Globe","getPolygonLabel","d3","TimeLine","Spinner","Modal","World","props","globeEl","countries","setCountries","features","hoverD","setHoverD","dimension","setDimension","width","window","innerWidth","height","innerHeight","worldTotal","setTotal","infected","deaths","recovered","loading","setLoading","modalState","setModalState","data","setData","countryInfo","setCountryInfo","name","caseperM","deathsperM","totalCase","testperM","addEventListener","current","controls","autoRotate","autoRotateSpeed","fetchData","covidData","fetch","then","res","json","totalDeaths","totalCases","recoveries","covid","Map","forEach","value","set","iso2","cases","activeCases","active","deathsPerOneMillion","casesPerOneMillion","testsPerOneMillion","i","array","found","get","properties","ISO_A2","undefined","Number","getVal","feat","Math","pow","POP_EST","maxVal","max","map","colorScale","scaleSequential","interpolateReds","domain","getFlagName","d","ADMIN","toLowerCase","handleClose","flagName","e"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useMemo, useRef} from 'react'\nimport Globe from 'react-globe.gl';\nimport {getPolygonLabel} from './Label';\nimport * as d3 from 'd3'\nimport TimeLine from './AdditonalInfo';\nimport Spinner from './Spinner';\nimport './Globe.css';\nimport Modal from '../Modal/Modal.js';\n\nconst World = (props)=>{\n  const globeEl = useRef();\n  const [countries, setCountries] = useState({ features: []});\n    const [hoverD, setHoverD] = useState();\n    const [dimension,setDimension] = useState({width:window.innerWidth,height:window.innerHeight})\n    const [worldTotal,setTotal] = useState({infected:0, deaths:0,recovered:0})\n    const [loading,setLoading] =useState(false);\n    const [modalState,setModalState] = useState(false);\n    const [data,setData] =useState([]);\n    const [countryInfo, setCountryInfo] = useState({name:'',caseperM:0,deathsperM:0,totalCase:0,testperM:0});\n    useEffect(() => {\n\n        window.addEventListener('resize', () => {\n          setDimension({width:window.innerWidth,height:window.innerHeight});\n        });\n        globeEl.current.controls().autoRotate = true;\n      globeEl.current.controls().autoRotateSpeed = 0.7;\n     const fetchData= async() =>{\n      let covidData = await fetch(\"https://corona.lmao.ninja/v2/countries\").then(res=>res.json());\n      \n      let data = await fetch('https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson').then(res => res.json());\n      let totalDeaths=0,totalCases=0,recoveries =0;\n      let covid = new Map();\n      covidData.forEach(value=>{\n\n          covid.set(value.countryInfo.iso2,{\n              iso2:value.countryInfo.iso2,\n              totalCases: value.cases,\n              totalDeaths:value.deaths,\n              recoveries:value.recovered,\n              activeCases:value.active,\n              deathsPerOneMillion:value.deathsPerOneMillion,\n              casesPerOneMillion:value.casesPerOneMillion,\n              testsPerOneMillion:value.testsPerOneMillion\n          })\n      })\n      data.features.forEach((value,i,array)=>{\n        let found = covid.get(array[i].properties.ISO_A2)\n        if(found===undefined){\n            array[i].properties.totalCases = 0;\n            array[i].properties.totalDeaths = 0;\n            array[i].properties.recoveries = 0;\n            array[i].properties.activeCases = 0;\n            array[i].properties.caseperM = 0;\n            array[i].properties.deathsperM =0;\n\n        }\n        else{\n            array[i].properties.totalCases = found.totalCases;\n            array[i].properties.totalDeaths = found.totalDeaths;\n            array[i].properties.recoveries = found.recoveries;\n            array[i].properties.activeCases = found.activeCases;\n            array[i].properties.caseperM = found.casesPerOneMillion;\n            array[i].properties.deathsperM = found.deathsPerOneMillion;\n            array[i].properties.testperM = found.testsPerOneMillion;\n            totalCases+=Number(found.totalCases);\n            totalDeaths+=Number(found.totalDeaths);\n            recoveries+=Number(found.recoveries);\n        }\n        })\n      \n      setCountries(data);\n      setTotal({infected:totalCases,deaths:totalDeaths,recovered:recoveries});\n      setLoading(true);\n      setModalState(false);\n    }\n\n      fetchData();\n    }, []);\n        // Getting the scale small enough so the globe looks nicer\n        const getVal = feat => {\n            return Math.pow(feat.properties.activeCases / feat.properties.POP_EST, 1 / 4);\n        }    \n        const maxVal = useMemo(\n      () => Math.max(...countries.features.map(getVal)),\n      [countries]\n    );\n        const colorScale = d3.scaleSequential(d3.interpolateReds)\n        colorScale.domain([0, maxVal]);\n    \n        function getFlagName(d) {\n            switch (d.ADMIN) {\n              case \"France\":\n                return \"fr\";\n              case \"Norway\":\n                return \"no\";\n              default:\n                return d.ISO_A2.toLowerCase();\n            }\n          }\n          function handleClose(){\n            setModalState(false);\n          }\n        return (\n        <div className=\"Canvas_Container\" >\n          <div className=\"top-info-container\">\n      <div className=\"title\">COVID-19 GLOBE TRACKER</div>\n    </div>{loading ? null : <Spinner/> }\n        <Modal show={modalState} handleClose={handleClose} name ={countryInfo}data={data}></Modal>\n        <Globe\n          globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n          backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n          width={dimension.width}\n          height={dimension.height}\n          ref={globeEl}\n          showAtmosphere={false}\n          polygonsData={countries.features}\n          polygonAltitude={d => d === hoverD ? 0.12 : 0.06}\n          polygonCapColor={d => d === hoverD ? '#eceac4' : colorScale(getVal(d))}\n          polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n          polygonStrokeColor={() => '#111'}\n          polygonLabel={({ properties: d }) => {\n            const flagName = getFlagName(d);\n            return getPolygonLabel(flagName, d);\n  }}\n          onPolygonHover={setHoverD}\n          onPolygonClick={({ properties: d },e)=>{\n            setModalState(true);\n            setData([d.activeCases,d.totalDeaths,d.recoveries]);\n            setCountryInfo({name:d.ADMIN,caseperM:d.caseperM,deathsperM:d.deathsperM,totalCase:d.totalCases,testperM:d.testperM});\n          }}\n          polygonsTransitionDuration={300}\n        />\n        <TimeLine infected={worldTotal.infected} deaths={worldTotal.deaths} recovered={worldTotal.recovered}/>\n       </div>\n        );\n\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}