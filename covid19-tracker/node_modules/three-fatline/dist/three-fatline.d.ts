import { InstancedBufferGeometry, Matrix4, WireframeGeometry, LineSegments, Mesh, EdgesGeometry, Line, ShaderMaterial, Color, Vector2, MaterialParameters } from 'three';

declare class LineSegmentsGeometry extends InstancedBufferGeometry {

	constructor();
	isLineSegmentsGeometry: boolean;

	applyMatrix( matrix: Matrix4 ): this;
	applyMatrix4( matrix: Matrix4 ): this;
	computeBoundingBox(): void;
	computeBoundingSphere(): void;
	fromEdgesGeometry( geometry: WireframeGeometry ): this;
	fromLineSegements( lineSegments: LineSegments ): this;
	fromMesh( mesh: Mesh ): this;
	fromWireframeGeometry( geometry: EdgesGeometry ): this;
	setColors( array: number[] | Float32Array ): this;
	setPositions( array: number[] | Float32Array ): this;

}

declare class LineGeometry extends LineSegmentsGeometry {

	constructor();
	isLineGeometry: boolean;

	fromLine( line: Line ): this;

}

interface LineMaterialParameters extends MaterialParameters {
	color?: number;
	dashed?: boolean;
	dashScale?: number;
	dashSize?: number;
	gapSize?: number;
	linewidth?: number;
	resolution?: Vector2;
}

declare class LineMaterial extends ShaderMaterial {

	constructor( parameters?: LineMaterialParameters );
	color: Color;
	dashed: boolean;
	dashScale: number;
	dashSize: number;
	gapSize: number;
	isLineMaterial: boolean;
	linewidth: number;
	resolution: Vector2;

}

declare class LineSegments2 extends Mesh {

	constructor( geometry?: LineSegmentsGeometry, material?: LineMaterial );
	isLineSegments2: boolean;

	computeLineDistances(): this;

}

declare class Line2 extends LineSegments2 {

	constructor( geometry?: LineGeometry, material?: LineMaterial );
	isLine2: boolean;

}

export { Line2, LineGeometry, LineMaterial, LineSegments2, LineSegmentsGeometry };
