var e=require("three"),r={backside:!0,coefficient:.5,color:"gold",size:2,power:1};function o(r,o,n){return new e.ShaderMaterial({depthWrite:!1,fragmentShader:"\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex\t= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity\t= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}",transparent:!0,uniforms:{coefficient:{value:r},color:{value:new e.Color(o)},power:{value:n}},vertexShader:"\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvoid main() {\n  vVertexNormal\t= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"})}function n(r,o){var n=r.clone(),t=new Array(n.vertices.length);return n.faces.forEach(function(r){r instanceof e.Face3?(t[r.a]=r.vertexNormals[0],t[r.b]=r.vertexNormals[1],t[r.c]=r.vertexNormals[2]):console.error("Face needs to be an instance of THREE.Face3.")}),n.vertices.forEach(function(e,r){var n=t[r],i=n.y,a=n.z;e.x+=n.x*o,e.y+=i*o,e.z+=a*o}),n}exports.createGlowGeometry=n,exports.createGlowMaterial=o,exports.createGlowMesh=function(t,i){void 0===i&&(i=r);var a=i.backside,c=i.coefficient,l=i.color,v=i.power,s=n(t,i.size),x=o(c,l,v);return a&&(x.side=e.BackSide),new e.Mesh(s,x)},exports.defaultOptions=r;
//# sourceMappingURL=index.js.map
