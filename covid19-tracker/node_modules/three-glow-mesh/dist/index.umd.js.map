{"version":3,"file":"index.umd.js","sources":["../index.js"],"sourcesContent":["import { BackSide, Color, Face3, Mesh, ShaderMaterial } from 'three';\n\nconst fragmentShader = `\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex\t= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity\t= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}`;\n\nconst vertexShader = `\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvoid main() {\n  vVertexNormal\t= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n\nexport const defaultOptions = {\n  backside: true,\n  coefficient: 0.5,\n  color: 'gold',\n  size: 2,\n  power: 1,\n};\n\n// Based off: http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\nexport function createGlowMaterial(coefficient, color, power) {\n  return new ShaderMaterial({\n    depthWrite: false,\n    fragmentShader,\n    transparent: true,\n    uniforms: {\n      coefficient: {\n        value: coefficient,\n      },\n      color: {\n        value: new Color(color),\n      },\n      power: {\n        value: power,\n      },\n    },\n    vertexShader,\n  });\n}\n\nexport function createGlowGeometry(geometry, size) {\n  // Gather vertexNormals from geometry.faces\n  const glowGeometry = geometry.clone();\n  const vertexNormals = new Array(glowGeometry.vertices.length);\n  glowGeometry.faces.forEach((face) => {\n    if (face instanceof Face3) {\n      vertexNormals[face.a] = face.vertexNormals[0];\n      vertexNormals[face.b] = face.vertexNormals[1];\n      vertexNormals[face.c] = face.vertexNormals[2];\n    } else {\n      console.error('Face needs to be an instance of THREE.Face3.');\n    }\n  });\n\n  // Modify the vertices according to vertexNormal\n  glowGeometry.vertices.forEach((vertex, i) => {\n    const { x, y, z } = vertexNormals[i];\n    vertex.x += x * size;\n    vertex.y += y * size;\n    vertex.z += z * size;\n  });\n\n  return glowGeometry;\n}\n\nexport function createGlowMesh(geometry, options = defaultOptions) {\n  const { backside, coefficient, color, size, power } = options;\n\n  const glowGeometry = createGlowGeometry(geometry, size);\n  const glowMaterial = createGlowMaterial(coefficient, color, power);\n\n  if (backside) {\n    glowMaterial.side = BackSide;\n  }\n\n  return new Mesh(glowGeometry, glowMaterial);\n}\n"],"names":["defaultOptions","backside","coefficient","color","size","power","createGlowMaterial","ShaderMaterial","depthWrite","fragmentShader","transparent","uniforms","value","Color","vertexShader","createGlowGeometry","geometry","glowGeometry","clone","vertexNormals","Array","vertices","length","faces","forEach","face","Face3","a","b","c","console","error","vertex","i","y","z","x","options","glowMaterial","side","BackSide","Mesh"],"mappings":"gOAEA,IA2BaA,EAAiB,CAC5BC,UAAU,EACVC,YAAa,GACbC,MAAO,OACPC,KAAM,EACNC,MAAO,YAIOC,EAAmBJ,EAAaC,EAAOE,GACrD,WAAWE,iBAAe,CACxBC,YAAY,EACZC,0gBACAC,aAAa,EACbC,SAAU,CACRT,YAAa,CACXU,MAAOV,GAETC,MAAO,CACLS,MAAO,IAAIC,QAAMV,IAEnBE,MAAO,CACLO,MAAOP,IAGXS,qTAIYC,EAAmBC,EAAUZ,GAE3C,IAAMa,EAAeD,EAASE,QACxBC,EAAgB,IAAIC,MAAMH,EAAaI,SAASC,QAmBtD,OAlBAL,EAAaM,MAAMC,QAAQ,SAACC,GACtBA,aAAgBC,SAClBP,EAAcM,EAAKE,GAAKF,EAAKN,cAAc,GAC3CA,EAAcM,EAAKG,GAAKH,EAAKN,cAAc,GAC3CA,EAAcM,EAAKI,GAAKJ,EAAKN,cAAc,IAE3CW,QAAQC,MAAM,kDAKlBd,EAAaI,SAASG,QAAQ,SAACQ,EAAQC,SACjBd,EAAcc,GAAvBC,IAAAA,EAAGC,IAAAA,EACdH,EAAOI,KADCA,EACQhC,EAChB4B,EAAOE,GAAKA,EAAI9B,EAChB4B,EAAOG,GAAKA,EAAI/B,IAGXa,0EAGsBD,EAAUqB,YAAAA,IAAAA,EAAUrC,OACzCC,EAA8CoC,EAA9CpC,SAAUC,EAAoCmC,EAApCnC,YAAaC,EAAuBkC,EAAvBlC,MAAaE,EAAUgC,EAAVhC,MAEtCY,EAAeF,EAAmBC,EAFcqB,EAAhBjC,MAGhCkC,EAAehC,EAAmBJ,EAAaC,EAAOE,GAM5D,OAJIJ,IACFqC,EAAaC,KAAOC,gBAGXC,OAAKxB,EAAcqB"}